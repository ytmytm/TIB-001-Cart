
# note: DISKASC and DISPASC are identical

# most complete reference
# disassembly incomplete - there is 1541 turbo drive code in here
# jump table calls not all labeled

GLOBAL {
    OUTPUTNAME "filecopy.s";
    INPUTNAME "../../firmware/utils/FILECOPY.EXE";
    STARTADDR $0800;
    PAGELENGTH 0;	# no paging
    CPU "6502";
};


RANGE { START $0FA2; END $2000; TYPE TextTable; COMMENT "messages"; };
RANGE { START $0C9F; END $0CA0; TYPE TextTable; };
RANGE { START $0DB6; END $0DBB; TYPE TextTable; };
LABEL { NAME "StartupTxt";	ADDR $0FD6; };
LABEL { NAME "PromptTxt";	ADDR $0FA2; };
LABEL { NAME "PromptNewTxt";	ADDR $0FBE; };
LABEL { NAME "FilenameBuffer";  ADDR $1089; };
LABEL { NAME "CBMDirectoryName";	ADDR $0C9F; };
LABEL { NAME "DriveCode_";	ADDR $0CA1; COMMENT "1541 turbo code"; };
LABEL { NAME "DriveCodeEND_";	ADDR $0D8F; COMMENT "1541 turbo code end"; };
LABEL { NAME "DOSCommand";	ADDR $0DB6; };

# DD-001 firmware
LABEL { NAME "NumOfSectors";	ADDR $F7; SIZE 1; };
LABEL { NAME "SectorL";		ADDR $F8; SIZE 1; };
LABEL { NAME "SectorH";		ADDR $F9; SIZE 1; };
LABEL { NAME "DirPointer";	ADDR $FB; SIZE 2; };
LABEL { NAME "Z_FF";		ADDR $FF; SIZE 1; };
LABEL { NAME "StartofDir";	ADDR $0334; SIZE 1; COMMENT "page number where directory buffer starts (need 2 pages for a sector)"; };
LABEL { NAME "EndofDir";	ADDR $0335; SIZE 1; COMMENT "page number where directory buffer ends(?)"; };
LABEL { NAME "TapeBuffer";	ADDR $033C; SIZE $BF; };
# DD-001 ROM (routines in RAM)
LABEL { NAME "RdDataRamDxxx";	ADDR $01A0; COMMENT "direct call to RdDataRamDxxx instead of jump table $8081; read data from 64K RAM (under I/O), after InitStackProg"; };
LABEL { NAME "WrDataRamDxxx";	ADDR $01AF; COMMENT "(would that be spare call at jump table $8084?); read data from 64K RAM (under I/O), after InitStackProg"; };
# DD-001 ROM
LABEL { NAME "CART_COLDSTART";	ADDR $8000; SIZE 2; COMMENT "cartridge cold start vector"; };
LABEL { NAME "SaveReloc";	ADDR $8472; COMMENT "direct call to SaveReloc instead of jump table _SaveReloc $8063"; };
LABEL { NAME "FindFAT";		ADDR $85A8; COMMENT "direct call to FindFAT instead of jump table _FindFAT $8045"; };
LABEL { NAME "ShowError";	ADDR $8650; COMMENT "direct call to ClearFATs instead of jump table _ClearFATs $804E"; };
LABEL { NAME "NewLoad";		ADDR $86BC; COMMENT "direct call to NewLoad instead of jump table _NewLoad $8009"; };
LABEL { NAME "GetNextCluster";	ADDR $87A4; COMMENT "direct call to GetNextCluster instead of jump table _GetNextCluster $803C"; };
LABEL { NAME "GetFATs";		ADDR $8813; COMMENT "direct call to GetFATs instead of jump table _GetFATs $8054"; };
LABEL { NAME "CalcFirst";	ADDR $883A; COMMENT "direct call to CalcFirst instead of jump table _CalcFirst $8051"; };
LABEL { NAME "ReadDirectory";	ADDR $8E0F; COMMENT "direct call to ReadDirectory instead of jump table _ReadDirectory $8060"; };
LABEL { NAME "FindFile";	ADDR $8FEA; COMMENT "direct call to FindFile instead of jump table _FindFile $805A"; };
LABEL { NAME "WaitRasterLine";	ADDR $8851; COMMENT "direct call to WaitRasterLine, not exposed in jump table"; };
LABEL { NAME "ReadSectors";	ADDR $885E; COMMENT "direct call to ReadSectors instead of jump table _ReadSectors $801B"; };
LABEL { NAME "SetupSector";	ADDR $8899; COMMENT "direct call to SetupSector instead of jump table _SetupSector $8030"; };
LABEL { NAME "Recalibrate";	ADDR $88F7; COMMENT "direct call to Recalibrate instead of jump table _Recalibrate $8036"; };
LABEL { NAME "Specify";		ADDR $891A; COMMENT "direct call to Specify instead of jump table _Specify $8033"; };
LABEL { NAME "ReadStatus";	ADDR $8962; COMMENT "direct call to ReadStatus instead of jump table _ReadStatus $8021"; };
LABEL { NAME "SeekTrack";	ADDR $898A; COMMENT "direct call to SeekTrack instead of jump table _SeekTrack $8057"; };
LABEL { NAME "Wait4DataReady";	ADDR $89C8; COMMENT "direct call to Wait4DataReady, not exposed in jump table"; };
LABEL { NAME "FormatDisk";	ADDR $89DB; COMMENT "direct call to FormatDisk instead of jump table _FormatDisk $800F"; };
LABEL { NAME "WriteSector";	ADDR $8BEE; COMMENT "direct call to WriteSector instead of jump table _WriteSector $801E"; };
LABEL { NAME "InitStackProg";	ADDR $8D5A; COMMENT "direct call to InitStackProg instead of jump table _InitStackProg $802D"; };
LABEL { NAME "SetWatchdog";	ADDR $8D90; COMMENT "direct call to SetWatchdog instead of jump table _SetWatchdog $8018"; };
LABEL { NAME "StopWatchdog";	ADDR $8DBD; COMMENT "direct call to StopWatchdog instead of jump table _StopWatchdog $807E"; };
LABEL { NAME "FindBlank";	ADDR $8F4F; COMMENT "direct call to FindBlank instead of jump table _NewLoad $8078"; };
LABEL { NAME "ShowSize";	ADDR $9127; COMMENT "direct call to ShowSize instead of jump table _ShowSize $8066"; };
LABEL { NAME "ShowBytesFree";	ADDR $916A; COMMENT "direct call to ShowBytesFree instead of jump table _ShowBytesFree $806C"; };
LABEL { NAME "BN2DEC";		ADDR $920E; COMMENT "direct call to BN2DEC instead of jump table _BN2DEC $806F"; };
LABEL { NAME "ShowError";	ADDR $926C; COMMENT "direct call to ShowError instead of jump table _ShowError $8069"; };

# DD-001 I/O
LABEL { NAME "StatusRegister";	ADDR $DE80; SIZE 1; COMMENT "floppy controller status register"; };
LABEL { NAME "DataRegister";	ADDR $DE81; SIZE 1; COMMENT "floppy controller data register"; };
LABEL { NAME "ResetFDC";	ADDR $DF80; SIZE 1; COMMENT "write here to reset floppy controller (any write to $DFxx)"; };
LABEL { NAME "ResetFDC00";	ADDR $DF00; SIZE 1; COMMENT "write here to reset floppy controller (any write to $DFxx)"; };


# C64 Kernal
LABEL { NAME "KERNAL_SETLFS";	ADDR $FFBA; COMMENT "Set logical file"; };
LABEL { NAME "KERNAL_SETNAM";	ADDR $FFBD; COMMENT "Set file name"; };
LABEL { NAME "KERNAL_OPEN";	ADDR $FFC0; COMMENT "Open file"; };
LABEL { NAME "KERNAL_CLOSE";	ADDR $FFC3; COMMENT "Close file"; };
LABEL { NAME "KERNAL_CHKIN";	ADDR $FFC6; COMMENT "Open channel for input"; };
LABEL { NAME "KERNAL_CLRCHN";	ADDR $FFCC; COMMENT "Clear I/O channels"; };
LABEL { NAME "KERNAL_CHRIN";	ADDR $FFCF; COMMENT "Get a character from the input channel"; };
LABEL { NAME "KERNAL_CHROUT";	ADDR $FFD2; COMMENT "Output a character"; };
LABEL { NAME "KERNAL_LOAD";	ADDR $FFD5; COMMENT "Load file"; };
LABEL { NAME "KERNAL_STOP";	ADDR $FFE1; COMMENT "Check if key pressed (RUN/STOP)"; };
LABEL { NAME "KERNAL_GETIN";	ADDR $FFE4; COMMENT "Get a character"; };

# C64 memory map
LABEL { NAME "P6510";	ADDR $01;	SIZE 1; COMMENT "DR onboard I/O port of 6510"; };
LABEL { NAME "BASICPRG";	ADDR $2B;	SIZE 2;	COMMENT "Basic program start address ($0801)"; };
LABEL { NAME "MSGFLG";	ADDR $9D;	SIZE 1; COMMENT "Kernal message control (bit 7=show control, bit 6=show error); $80=direct mode, $00=program mode"; };
LABEL { NAME "MSGFLG";	ADDR $90;	SIZE 1; COMMENT "Kernal I/O status (0=ok, bit 7=device not present, bit 6=end of file"; };
LABEL { NAME "STARTADDR";	ADDR $C1;	SIZE 2;	COMMENT "Start address for LOAD/SAVE/VERIFY"; };
LABEL { NAME "STARTADDR0";	ADDR $C3;	SIZE 2; COMMENT "Start address for LODA/SAVE/VEFIFY with secondary address SECADR=0"; };
LABEL { NAME "NDX";	ADDR $C6;	SIZE 1; COMMENT "Number of characters in keyboard queue"; };
LABEl { NAME "RVS";	ADDR $C7;	SIZE 1; COMMENT "Print reverse characters (0=no)"; };
LABEL { NAME "ENDADDR";	ADDR $AE;	SIZE 2; COMMENT "End address for LOAD/SAVE/VERIFY"; };
LABEL { NAME "FNLEN";	ADDR $B7;	SIZE 1; COMMENT "Length of current filename, set by SETNAM"; };
LABEL { NAME "SECADR";	ADDR $B9;	SIZE 1;	COMMENT "Current secondary address"; };
LABEL { NAME "CURDEVICE";	ADDR $BA;	SIZE 1; COMMENT "Current device number"; };
LABEL { NAME "FNADR";	ADDR $BB;	SIZE 2; COMMENT "Pointer to current filename, set by SETNAM"; };
LABEL { NAME "Z_FD";	ADDR $FD;	SIZE 1; COMMENT "$FD location, free to use"; };

LABEL { NAME "COLOR";	ADDR $0286;	SIZE 1; COMMENT "foreground text color"; };

LABEL { NAME "VICCTR1";	ADDR $D011;	SIZE 1; COMMENT "control register 1"; };
LABEL { NAME "VICLINE";	ADDR $D012;	SIZE 1; COMMENT "raster line"; };
LABEL { NAME "VICBOCL";	ADDR $D020;	SIZE 1; COMMENT "border color"; };
LABEL { NAME "VICBAC0";	ADDR $D021;	SIZE 1; COMMENT "background color 0"; };

LABEL { NAME "CIA1IRQ";	ADDR $DC0D;	SIZE 1; COMMENT "CIA#1 IRQ register"; };

LABEL { NAME "CIA2IRQ";	ADDR $DD0D;	SIZE 1; COMMENT "CIA#2 NMI register"; };
